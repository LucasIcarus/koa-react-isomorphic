input AddTodoMutationInput {
  text: String!
  clientMutationId: String
}

type AddTodoMutationPayload {
  todoEdge: TodoEdge
  viewer: Viewer
  clientMutationId: String
}

input CompleteTodoMutationInput {
  id: String!
  clientMutationId: String
}

type CompleteTodoMutationPayload {
  todo: Todo
  viewer: Viewer
  clientMutationId: String
}

type Mutation {
  addTodo(input: AddTodoMutationInput!): AddTodoMutationPayload
  removeTodo(input: RemoveTodoMutationInput!): RemoveTodoMutationPayload
  completeTodo(input: CompleteTodoMutationInput!): CompleteTodoMutationPayload
}

# An object with an ID
interface Node {
  # The id of the object.
  id: ID!
}

# Information about pagination in a connection.
type PageInfo {
  # When paginating forwards, are there more items?
  hasNextPage: Boolean!

  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!

  # When paginating backwards, the cursor to continue.
  startCursor: String

  # When paginating forwards, the cursor to continue.
  endCursor: String
}

# Root of the Blog Schema
type Query {
  # Fetches an object given its ID
  node(
    # The ID of an object
    id: ID!
  ): Node
  viewer: Viewer
}

input RemoveTodoMutationInput {
  id: String!
  clientMutationId: String
}

type RemoveTodoMutationPayload {
  id: ID
  viewer: Viewer
  clientMutationId: String
}

# This represents todo list
type Todo implements Node {
  # The ID of an object
  id: ID!
  text: String
  complete: Boolean
}

# A connection to a list of items.
type TodoConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [TodoEdge]
}

# An edge in a connection.
type TodoEdge {
  # The item at the end of the edge
  node: Todo

  # A cursor for use in pagination
  cursor: String!
}

# This represents the root query of app
type Viewer implements Node {
  # The ID of an object
  id: ID!
  todos(after: String, first: Int, before: String, last: Int): TodoConnection
  numberOfTodos: Int
}
