schema {
  query: Query
  mutation: Mutation
}

input AddTodoMutationInput {
  text: String!
  clientMutationId: String!
}

type AddTodoMutationPayload {
  todoEdge: TodoEdge
  viewer: Viewer
  clientMutationId: String!
}

input CompleteTodoMutationInput {
  id: String!
  clientMutationId: String!
}

type CompleteTodoMutationPayload {
  todo: Todo
  viewer: Viewer
  clientMutationId: String!
}

type Mutation {
  addTodo(input: AddTodoMutationInput!): AddTodoMutationPayload
  removeTodo(input: RemoveTodoMutationInput!): RemoveTodoMutationPayload
  completeTodo(input: CompleteTodoMutationInput!): CompleteTodoMutationPayload
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  node(id: ID!): Node
  viewer: Viewer
}

input RemoveTodoMutationInput {
  id: String!
  clientMutationId: String!
}

type RemoveTodoMutationPayload {
  id: ID
  viewer: Viewer
  clientMutationId: String!
}

type Todo implements Node {
  id: ID!
  text: String
  complete: Boolean
}

type TodoConnection {
  pageInfo: PageInfo!
  edges: [TodoEdge]
}

type TodoEdge {
  node: Todo
  cursor: String!
}

type Viewer implements Node {
  id: ID!
  todos(after: String, first: Int, before: String, last: Int): TodoConnection
  numberOfTodos: Int
}
